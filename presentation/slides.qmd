---
title: A Long-Term Archival Pipeline for the Forschungsdatenplattform Stadt.Geschichte.Basel
subtitle: omeka2dsp
author:
  - name: "Moritz Mähr"
    affiliation:
    - "University of Basel"
    - "University of Bern"
    orcid: "0000-0002-1367-1618"
    email: "moritz.maehr@gmail.com"
  - name: "Moritz Twente"
    affiliation: "University of Basel"
    orcid: "0009-0005-7187-9774"
    email: "mtwente@protonmail.com"
date: 2025-10-15
abstract: |
  TBD
format:
  revealjs:
    theme: simple
    css: /styles.css
    slide-number: true
    incremental: true
    # transition: slide
    code-line-numbers: true
    embed-resources: true
    menu:
      side: right
      width: normal
    height: 900
    width: 1600
    preview-links: auto
  # pptx:
  #   reference-doc: "SGB_PowerPoint_Vorlage.potx"
---

## Stadt.Geschichte.Basel

-   Large-scale historical research project, initiated in 2011 by the Association for Basel History and carried out 2017–2026 at the University of Basel
-   More than 70 researchers studying the history of Basel from the earliest settlements to the present day
-   Funded with more than 9 million Swiss francs by the Canton of Basel-Stadt, the Lottery Fund, and private sponsors
-   Specialized team for research data management and public history

## Research Data

```{mermaid}
flowchart LR
  subgraph Research[Research]
    Publications[📚 Publications]
    Data[📊 Statistical & Geo Data]
    Code[💻 Source Code]
  end
```

## Collecting and Managing research data

```{mermaid}
flowchart LR
  subgraph Research[Research]
    Publications[📚 Publications]
    Data[📊 Statistical & Geo Data]
    Code[💻 Source Code]
  end

  subgraph Repositories
    Omeka[(📁 omeka.unibe.ch)]
    GitHub[(🐙 GitHub)]
  end

  %% Flows
  Publications -- figures --> Omeka
  Data -- visualizations --> Omeka
  Code --> GitHub
```

## Public history with research data

```{mermaid}
flowchart LR
  subgraph Research[Research]
    Publications[📚 Publications]
    Data[📊 Statistical & Geo Data]
    Code[💻 Source Code]
  end

  subgraph Repositories
    Omeka[(📁 omeka.unibe.ch)]
    GitHub[(🐙 GitHub)]
  end

  subgraph PublicWeb[Public History Websites]
    RDP[forschung.stadtgeschichtebasel.ch]

  %% Flows
  Publications -- figures --> Omeka
  Data -- visualizations --> Omeka
  Code --> GitHub
  Omeka -- API --> RDP
  GitHub -- Static Site Generator --> RDP
```

## Archiving research data for the long term

```{mermaid}
flowchart LR
  subgraph Research[Research]
    Publications[📚 Publications]
    Data[📊 Statistical & Geo Data]
    Code[💻 Source Code]
  end

  subgraph Repositories[Repositories]
    Omeka[(📁 omeka.unibe.ch)]
    GitHub[(🐙 GitHub)]
  end

  subgraph PublicWeb[Public History Websites]
    RDP[forschung.stadtgeschichtebasel.ch]
  end

  subgraph Archives[Long-term Archives]
    Zenodo[(📦 Zenodo)]
    DaSCH[(🏛️ DaSCH)]
    UBBasel[(📚 Universitätsbibliothek Basel)]
  end

  %% Flows
  Publications -- figures --> Omeka
  Publications -- books --> UBBasel
  Publications -- other publications --> Zenodo
  Data -- visualizations --> Omeka
  Omeka -- API --> RDP
  GitHub -- static site generator --> RDP
  Code --> GitHub
  GitHub --> Zenodo
  Omeka --> DaSCH
```

## Why long-term archiving?

1.  **Institutional Control**: Omeka not under our control
2.  **Persistence**: GitHub Pages not suitable for large files
3.  **FAIR Compliance**: No versioning or persistent identifiers
4.  **Long-term Funding**: Infrastructure dependencies

## Where DaSCH fits in

```{mermaid}
flowchart LR
  subgraph Research[Research]
    Publications[📚 Publications]
    Data[📊 Statistical & Geo Data]
  end

  subgraph Repositories
    Omeka[(📁 omeka.unibe.ch)]
  end

  subgraph Archives[Long-term Archives]
    DaSCH[(🏛️ DaSCH)]
  end

  %% Flows
  Publications -- figures --> Omeka
  Data -- visualizations --> Omeka
  Omeka --> DaSCH
```

## Challenges

- Data model differences (Omeka vs DaSCH)
- Metadata transformation and crosswalks
- Version control and updates

# Data model differences

# Omeka

Item

Medium

## Data model Omeka (simplified)

```{mermaid}
classDiagram
  %% Core Omeka S entities (reduced)
  class Item {
    o:id : int
    o:is_public : bool
    o:title : string
    dcterms:identifier : string
    dcterms:subject[*] : IconclassTerm
    dcterms:temporal : Era
    dcterms:language : ISO639_2
    o:created : datetime
    o:modified : datetime
  }

  class Media {
    o:id : int
    o:item_id : int
    o:ingester : string
    o:media_type : MIME
    o:original_url : uri
    o:sha256 : hash
    dcterms:creator[*] : uri|text
    dcterms:date : string~EDTF
    dcterms:license : LicenseURI
    dcterms:rights : text
  }

  class ItemSet {
    o:id : int
    o:label : string
  }

  %% Controlled vocabularies as types
  class Era { <<type>> }
  class MIME { <<type>> }
  class LicenseURI { <<type>> }
  class IconclassTerm {
    <<external scheme>>
    code : string
    label : string
  }
  class ISO639_2 {
    <<code>>
    value : string
  }

  %% Relations and cardinalities
  Item "1" o-- "0..*" Media : has media
  Media "*" --> "1" Item : belongs to
  Item "*" o-- "0..*" ItemSet : in set(s)
  Item --> "0..*" IconclassTerm : subjects
  Media --> "0..*" IconclassTerm : subjects
  Item --> "1" Era : temporal
  Media --> "1" Era : temporal
  Media --> MIME : media_type
  Media --> LicenseURI : license
  Item --> ISO639_2 : language
```

## Data model DaSCH (simplified)

```{mermaid}
classDiagram
class Parent
class Document
class ResourceWithoutMedia
class Image

class SubjectList
class LanguageList
class TypeList
class FormatList
class TemporalList
class LicenseList

%% Core links to Parent object
Document "0..1" --> "1" Parent : linkToParentObject
ResourceWithoutMedia "0..1" --> "1" Parent : linkToParentObject
Image "0..1" --> "1" Parent : linkToParentObject

%% Value-list relations
Parent "1" --> "1" TemporalList : hasTemporalList
Parent "1" --> "0..*" SubjectList : hasSubjectList
Parent "1" --> "0..1" LanguageList : hasLanguageList

Document "1" --> "0..1" SubjectList : hasSubjectList
Document "1" --> "0..1" TemporalList : hasTemporalList
Document "1" --> "0..1" TypeList : hasTypeList
Document "1" --> "0..1" FormatList : hasFormatList
Document "1" --> "0..1" LanguageList : hasLanguageList
Document "1" --> "0..1" LicenseList : hasLicenseList

ResourceWithoutMedia "1" --> "0..1" SubjectList : hasSubjectList
ResourceWithoutMedia "1" --> "0..1" TemporalList : hasTemporalList
ResourceWithoutMedia "1" --> "0..1" TypeList : hasTypeList
ResourceWithoutMedia "1" --> "0..1" FormatList : hasFormatList
ResourceWithoutMedia "1" --> "0..1" LanguageList : hasLanguageList
ResourceWithoutMedia "1" --> "0..1" LicenseList : hasLicenseList

Image "1" --> "0..1" SubjectList : hasSubjectList
Image "1" --> "0..1" TemporalList : hasTemporalList
Image "1" --> "0..1" TypeList : hasTypeList
Image "1" --> "0..1" FormatList : hasFormatList
Image "1" --> "0..1" LanguageList : hasLanguageList
Image "1" --> "0..1" LicenseList : hasLicenseList
```

## Key differences

* **Modeling approach:**

  * *DaSCH*: Ontology-driven, class hierarchy (`Resource` → `Document` / `Image` …), explicit value classes (`TextValue`, `ListValue`).
  * *Omeka S*: Flat JSON-LD model (`Item`, `Media`, `ItemSet`), Dublin Core–centric.
* **Normalization & constraints:**

  * *DaSCH*: Strict cardinalities and mandatory fields (`hasTitle [1]`).
  * *Omeka S*: Flexible, validation through profiles/modules.
* **Hierarchy representation:**

  * *DaSCH*: Explicit `Parent` class and `linkToParentObject`.
  * *Omeka S*: Uses `ItemSet` or `dcterms:isPartOf`, no dedicated parent class.

# Metadata transformation

## Data validation

- Custom Python scripts using `pydantic` for schema validation as Omeka does not enforce strict validation
- Validation also helps identify data quality issues
- Lots of manual cleaning required, all done in Omeka

## Mapping Omeka to DaSCH



# Version control and updates

